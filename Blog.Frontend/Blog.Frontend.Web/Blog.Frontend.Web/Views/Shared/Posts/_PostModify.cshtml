@model Blog.Frontend.Web.Models.PostView

<script src="~/Plugins/ckeditor/ckeditor.js"></script>

<div class="post-modify-message-container">
    @if (Model != null)
    {
        if (Model.Post.PostContents.Count > 0)
        {
            foreach (var content in Model.Post.PostContents)
            {
                @Html.Partial("_PostMedia", GetPostMediaView(content));
            }
        }
        else
        {
        <div class="blogPostNoContent">
            <span>There are no contents for this post.</span>
        </div>
        }
    }
    @{ Model.Post.PostMessage = DecodeHtml(Model.Post.PostMessage); }
    @Html.TextAreaFor(model => model.Post.PostMessage, new { @class = "ckeditor" })
</div>

<div class="post-modify-date-buttons">
    @if (Model != null)
    {
        <span>This post is created at @Html.ValueFor(model => model.Post.CreatedDate)</span>
    }
    else
    {
        <span>&nbsp</span>
    }

    <input type="button" data-save="true" id="savePost" class="modificationButton" value="Save" />
    <input type="button" data-back="true" id="cancelModifyPost" class="modificationButton" value="Cancel" style="margin-right: 26px;" />
</div>

<div id="blockMessage" class="noshow blockUi">
    <span>We are processing your request.  Please be patient.</span>
</div>

<div id="missingFieldsMessage" title="Error encountered!">
  <p>
    <span style="float: left; margin: 0 7px 50px 0;"></span>
    <span></span>
  </p>
</div>

<script>
    $(function() {
        $("textarea").autosize();
    });
</script>

@functions
{
    public string GetSavePostAction()
    {
        if (Model == null) 
        { 
            return "window.Radix.Posts.addPost()";
        } 
        else 
        {
            return "window.Radix.Posts.modifyPost(" + Model.Post.PostId + ")"; 
        }
    }
    
    public string GetCancelPostAction()
    {
        if (Model.IsAdd)
        {
            return "window.Radix.Posts.deleteAddedPost(" + Model.Post.PostId + ")";
        }
        else
        {
            return "location.href='../../../Blog/PostsPage/PopularPosts'";
        }
    }
    
    public Blog.Frontend.Web.Models.PostMediaView GetPostMediaView(Blog.Backend.Services.BlogService.Contracts.BlogObjects.PostContent postContent)
    {
        var postMediaView = new Blog.Frontend.Web.Models.PostMediaView { PostContent = postContent, AllowDelete = true };
        return postMediaView;
    }
    
    public string DecodeHtml(string message)
    {
        return HttpUtility.HtmlDecode(message);
    }
}
